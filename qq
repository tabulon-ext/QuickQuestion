#!/bin/bash
# Usage:
# Ask a question using natural language
# $ qq [search terms]
#
# Search using @tags
# $ qq awk replace @unix
#
# Search including macOS tags
# $ qq '#awk #unix' replace
#
# Add a new question answer pair
# $ qq -a "This is the question" "This is the answer"
#
# Add a new question using clipboard as answer
# $ qq -p "This is the question"
#
# If no arguments are provided with -a or -p, input will be
# requested interactively. If used with -e, answer will be
# opened in editor.
#
# To edit an existing answer or use the editor to answer a
# new question, add the `-e` flag. If used alone, the first
# matching answer will be opened in your editor.
#
# CONFIGURATION
#
# Configuration is done via environment variables:
#
#   QQ_NOTES_DIR - Path to Markdown files
#   QQ_NOTES_EXT - Extension of answer files (default md)
#   QQ_NOTES_PRE - Prefix of question files (default ??)
#   QQ_EDITOR    - Text editor to use (default $EDITOR)
#
#  Example:
#  export QQ_NOTES_DIR="/Users/ttscoff/Dropbox/Notes"
#  export QQ_NOTES_EXT="md"
#
# CHANGELOG
# 1.2.1
# - Colorize output
# - List all known questions with -l
#
# 1.2.0
# - Add -p switch to pull answer from clipboard when adding a question
# - Improve option parsing
# - Allow -e when adding answer to open new question file in editor
# - Allow multi-line input when adding interactively
# - Allow '#atag' to translate to 'tag:atag' in spotlight search
# - Allow configuration via environment variables
#
# 1.1.1
# - Only opens url/copies code from one note if there are multiple answers

: ${QQ_NOTES_DIR:="$HOME/Dropbox/Notes/nvALT2.2"}
: ${QQ_NOTES_EXT:="md"}
: ${QQ_NOTES_PRE:="??"}
: ${QQ_EDITOR:=$EDITOR}

__qq () {
  ### CONFIG
  # notes folder, for note creation and limiting searches
  local NOTESDIR=$QQ_NOTES_DIR
  # extension used for your notes
  local NOTESEXT=$QQ_NOTES_EXT
  # the prefix you use to separate "Question" notes
  local NOTESPRE=$QQ_NOTES_PRE
  # editor command to use for modifying answers
  local QQEDITOR=$QQ_EDITOR

  NOTESDIR="${NOTESDIR%/}/"

  # Exlude file names containing these phrases, separated by colons
  local EXCLUDENAMES="what was I doing"

  #### END CONFIG
  local INPUT QQQUERY HAS_OPENED_URL HAS_COPIED_TEXT NOTESPREESC QUESTION ANSWER appname url
  local EXCLUDEQQQUERY=$(__qq_query_exclude_all "$EXCLUDENAMES")

  local EDITING=false
  local ADDING=false
  local PASTING=false
  local HELPING=false

  OPTIND=1

  while getopts "lpeah?c" opt; do
    case $opt in
      p)
        ADDING=true
        PASTING=true
        ;;
      e)
        EDITING=true
        ;;
      a)
        ADDING=true
        ;;
      c)
        __qq_config
        HELPING=true
        ;;
      l)
        __qq_list_all
        exit 0
        ;;
      h|\?)
        __qq_help
        HELPING=true
        ;;
    esac
  done

  shift $((OPTIND-1))
  [ "${1:-}" = "--" ] && shift

  if $HELPING; then
    exit 0
  fi

  HAS_COPIED_TEXT=false
  HAS_OPENED_URL=false

  if $ADDING; then
    if [ $# == 2 ]; then
      QUESTION=$1
      ANSWER=$2
    elif [ $# -le 1 ]; then
      if [ $# == 1 ]; then
        QUESTION=$1
        echo "Question: $QUESTION"
      else
        echo -n "Question: "
        read QUESTION
      fi

      if $PASTING; then
        ANSWER=$(pbpaste)
      elif [[ "$EDITING" == "false" ]]; then
        echo "Answer (Ctrl-D to end):"
        ANSWER=$(cat)
      fi
    else
      echo "Invalid number of arguments for -a(dd). Requires question and answer (or no arguments to input them at runtime)."
      echo "example: ${0##*/} -a \"What is the meaning of life?\" \"42\""
      exit 1
    fi
    local QQFILE="${NOTESDIR}$NOTESPRE $QUESTION.$NOTESEXT"

    if $EDITING; then
      echo -n "$ANSWER" >> "$QQFILE"
      $QQEDITOR "$QQFILE"
    else
      echo -n "$ANSWER" >> "$QQFILE" && echo "Question added and answered." || echo "Something went wrong"
    fi
  else
    if [[ $# == 0 ]]; then
      __qq_help
      exit 0
    fi

    QQQUERY="mdfind -onlyin '$NOTESDIR' -interpret '(kind:text OR kind:markdown) AND filename:$NOTESEXT AND filename:$NOTESPRE $(__qq_query_include_all "${*%\?}")${EXCLUDEQQQUERY}'"
    RESULTS=$(eval $QQQUERY)

    if [[ "$RESULTS" == "" ]]; then
      QQQUERY="mdfind -onlyin '$NOTESDIR' -interpret '(kind:text OR kind:markdown) AND filename:$NOTESEXT AND filename:$NOTESPRE $(__qq_query_include_all OR "${*%\?}")${EXCLUDEQQQUERY}'"
      RESULTS=$(eval $QQQUERY)
    fi

    if [[ "$RESULTS" == "" ]]; then
      echo "$(__qc red)Sorry, I don't know the answer to that question.$(__qc reset)"
      exit 2
    else
      if $EDITING; then
        ANSWER=$(echo "$RESULTS"|head -n 1)
        $QQEDITOR "$ANSWER"
      else
        echo -e "$RESULTS" | while read LINE; do
          if [[ "$LINE" =~ ^$ ]]; then
            echo "$(__qc red)Sorry, I don't know the answer to that question.$(__qc reset)"
            exit 1;
          fi
          QUESTION=`basename "$LINE" ".$NOTESEXT"`
          echo -e "\n"
          echo -n "$(__qc yellow)Q: $(__qc white)"
          NOTESPREESC=`echo "$NOTESPRE"|sed -E 's/([\?\!\$\`\"]) ?/\\\\\1/g'`
          echo "$QUESTION"|sed -E "s/$NOTESPREESC ?//g"|sed -E 's/([^\?])$/\1?/'
          echo -n "$(__qc yellow)A: $(__qc white)"
          cat "$LINE"|sed -E 's/@\([^\)]+\) ?//g'|sed -E 's/@copy\(([^\)]+)\)/\1/'|sed -E 's/@open\(([^\)+]*)\)/Related URL: \1/'|sed -E 's/@[^\( ]+ ?//g' # |sed -E 's/^[   ]*|[  ]*$//g'
          if [[ `cat "$LINE"|grep -E '@copy\('` && $HAS_COPIED_TEXT == false ]]; then
            cat "$LINE"|grep '@copy('|sed -E 's/.*@copy\(([^\)]+)\).*/\1/'|tr -d '\n'|pbcopy
            echo "Example in clipboard"
            HAS_COPIED_TEXT=true
          fi

          if [[ `cat "$LINE"|grep -E '@open\('` && $HAS_OPENED_URL == false ]]; then
            url=$(cat "$LINE"|grep '@open('|sed -E 's/.*@open\(([^\)]+)\).*/\1 /'|tr -d '\n')
            open -g $url
            echo "Opened URL"
            HAS_OPENED_URL=true
          fi
        done
        __qc reset
      fi
    fi
  fi
  exit 0
}

__qq_esc () {
  echo "$*"|sed 's/"/\\\"/g'|sed 's/#/tag:/g'
}

__qq_remove_stopwords () {
  local input=$1
  declare -a STOPWORDS=( what which is can how do my where when why that the was who this I )
  for word in ${STOPWORDS[@]}; do
    input=$(echo "$input"|sed -E "s/(^| )$word([\.\,\? ]|$)/\1/g")
  done
  echo -n "$input"
}

__qq_query_include_all () {
  local bool="AND"
  if [[ $1 == "OR" ]]; then
    bool="OR"
    shift
  fi
  if [[ "$*" != "" ]]; then
    local input=$(__qq_remove_stopwords "$*")

    declare -a query_array=( "$@" )
    local query=" AND ("
    for i in ${query_array[@]}; do
        query="${query}`__qq_esc $i` $bool "
    done
    echo -n "$query"|sed -e 's/ AND $/)/' -e 's/ OR $/)/'
  fi
}

__qq_query_exclude_all () {
  local input="$1"
  local OLDIFS=$IFS
  IFS=":"
  set $input
  declare -a query_array=( "$@" )
  local query=' NOT ('
  for i in ${query_array[@]}; do
      query="${query}filename:\"`__qq_esc $i`\" OR "
  done
  echo -n "$query"|sed 's/ OR $/)/'
  IFS=$OLDIFS
}

__qq_list_all () {
  local QQQUERY="mdfind -onlyin '$NOTESDIR' -interpret '(kind:text OR kind:markdown) AND filename:$NOTESEXT AND filename:$NOTESPRE ${EXCLUDEQQQUERY}'"
  local NOTESPREESC=`echo "$NOTESPRE"|sed -E 's/([\?\!\$\`\"]) ?/\\\\\1/g'`
  RESULTS=$(eval $QQQUERY)
  echo "$(__qc green)Questions I have answers to...$(__qc white)"
  echo -e "$RESULTS" | while read LINE; do
    if [[ "$LINE" =~ ^$ ]]; then
      echo "$(__qc red)Sorry, no answers found.$(__qc reset)"
      exit 1;
    fi
    QUESTION=`basename "$LINE" ".$NOTESEXT"`
    echo "$QUESTION"|sed -E "s/$NOTESPREESC ?//g"|sed -E 's/([^\?])$/\1?/'
  done
  __qc reset
}

__qq_help () {
  appname=`basename $0`
  echo "$(__qc white)QuickQuestion$(__qc reset) - build a knowledgebase with plain text files"
  echo "$(__qc green)Usage: $(__qc yellow)$appname $(__qc white)\"terms to search for\"$(__qc reset)"
  echo
  echo "$(__qc green)Options:$(__qc reset)"
  echo "   $(__qc white)-a$(__qc reset) [QUESTION $(__qc gray)[ANSWER]$(__qc reset)]  Add a question/answer"
  echo "   $(__qc white)  $(__qc reset)                      No arguments triggers interactive add"
  echo "   $(__qc white)-l$(__qc reset)                      List all known questions"
  echo "   $(__qc white)-p$(__qc reset) [QUESTION]           Add a question using the clipboard as answer"
  echo "   $(__qc white)-e$(__qc reset)                      Open editor with first result"
  echo "   $(__qc white)-h$(__qc reset)                      Show this help"
  echo "   $(__qc white)-c$(__qc reset)                      Display configuration"
  echo
  echo "Add question/answer: $(__qc yellow)$appname $(__qc white)-a$(__qc reset) \"Question in natural language\" \"Succinct answer\""
  echo "  Add interactively: $(__qc yellow)$appname $(__qc white)-a$(__qc reset)"
  echo " Add from clipboard: $(__qc yellow)$appname $(__qc white)-p$(__qc reset) [\"Optional Question\"]"
  echo "     Edit an answer: $(__qc yellow)$appname $(__qc white)-e$(__qc reset) \"terms to search for\" # first question found is edited"
  echo
}

__qq_config () {
  echo "$(__qc green)QuickQuestion Settings:$(__qc reset)"
  echo
  echo "$(__qc yellow)QQ_NOTES_DIR: $(__qc white)${QQ_NOTES_DIR}$(__qc reset)"
  echo "$(__qc yellow)QQ_NOTES_EXT: $(__qc white)${QQ_NOTES_EXT}$(__qc reset)"
  echo "$(__qc yellow)QQ_NOTES_PRE: $(__qc white)${QQ_NOTES_PRE}$(__qc reset)"
  echo "$(__qc yellow)   QQ_EDITOR: $(__qc white)${QQ_EDITOR}$(__qc reset)"
  echo
}

__qc () {
  local COLOR
  case $1 in
    gray)
      COLOR="\033[1;30m"
      ;;
    green)
      COLOR="\033[0;32m"
      ;;
    reset)
      COLOR="\033[0;39m"
      ;;
    cyan)
      COLOR="\033[0;36m"
      ;;
    white)
      COLOR="\033[1;37m"
      ;;
    yellow)
      COLOR="\033[0;33m"
      ;;
    red)
      COLOR="\033[0;31m"
      ;;
  esac
  echo -en $COLOR
}

# __qq_query_include_all OR $@
__qq "$@"
